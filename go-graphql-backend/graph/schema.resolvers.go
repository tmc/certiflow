package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-graphql-backend/graph/model"
	"time"
)

// CreateEvidence is the resolver for the createEvidence field.
func (r *mutationResolver) CreateEvidence(ctx context.Context, input *model.EvidenceInput) (*model.Evidence, error) {
	panic(fmt.Errorf("not implemented: CreateEvidence - createEvidence"))
}

// AddGoogleDocLinkToOrg is the resolver for the addGoogleDocLinkToOrg field.
func (r *mutationResolver) AddGoogleDocLinkToOrg(ctx context.Context, organizationID string, googleDocLink string) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: AddGoogleDocLinkToOrg - addGoogleDocLinkToOrg"))
}

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input *model.OrganizationInput) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: CreateOrganization - createOrganization"))
}

// GetControlCategory is the resolver for the getControlCategory field.
func (r *queryResolver) GetControlCategory(ctx context.Context, id string) (*model.ControlCategory, error) {
	panic(fmt.Errorf("not implemented: GetControlCategory - getControlCategory"))
}

// AllControlCategories is the resolver for the allControlCategories field.
func (r *queryResolver) AllControlCategories(ctx context.Context) ([]*model.ControlCategory, error) {
	panic(fmt.Errorf("not implemented: AllControlCategories - allControlCategories"))
}

// GetEvidence is the resolver for the getEvidence field.
func (r *queryResolver) GetEvidence(ctx context.Context, id string) (*model.Evidence, error) {
	panic(fmt.Errorf("not implemented: GetEvidence - getEvidence"))
}

// GetOrganization is the resolver for the getOrganization field.
func (r *queryResolver) GetOrganization(ctx context.Context, id string) (*model.Organization, error) {
	panic(fmt.Errorf("not implemented: GetOrganization - getOrganization"))
}

// TestSubscription is the resolver for the testSubscription field.
func (r *subscriptionResolver) TestSubscription(ctx context.Context) (<-chan string, error) {
	ch := make(chan string, 1)
	go func() {
		for i := 0; i < 100; i++ {
			select {
			case ch <- fmt.Sprintf("Hello! These are generated from the go backend. (iter: %d)", i):
			default:
				return
			}
			time.Sleep(1 * time.Second)
		}
	}()
	return ch, nil
}

// GenericCompletion is the resolver for the genericCompletion field.
func (r *subscriptionResolver) GenericCompletion(ctx context.Context, prompt string) (<-chan *model.CompletionChunk, error) {
	return r.genericCompletion(ctx, prompt)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
